"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import dbtlabs.proto.public.v1.events.vortex_pb2
import dbtlabs.proto.public.v1.fields.vscode_types_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ExtensionActivated(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    OS_NAME_FIELD_NUMBER: builtins.int
    OS_VERSION_FIELD_NUMBER: builtins.int
    INIT_SUCCESS_FIELD_NUMBER: builtins.int
    INIT_ERROR_FIELD_NUMBER: builtins.int
    INIT_ERROR_DETAIL_FIELD_NUMBER: builtins.int
    INIT_DURATION_MS_FIELD_NUMBER: builtins.int
    os_name: builtins.str
    """os name"""
    os_version: builtins.str
    """os version"""
    init_success: builtins.bool
    """whether the extension was able to initialize successfully"""
    init_error: builtins.str
    """type of initializion error, if an error occurred at initialization"""
    init_error_detail: builtins.str
    """detailed error message, if an error occurred at initialization"""
    init_duration_ms: builtins.int
    """duration of the initialization in milliseconds"""
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
        os_name: builtins.str = ...,
        os_version: builtins.str = ...,
        init_success: builtins.bool = ...,
        init_error: builtins.str = ...,
        init_error_detail: builtins.str = ...,
        init_duration_ms: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "init_duration_ms", b"init_duration_ms", "init_error", b"init_error", "init_error_detail", b"init_error_detail", "init_success", b"init_success", "os_name", b"os_name", "os_version", b"os_version", "user", b"user"]) -> None: ...

global___ExtensionActivated = ExtensionActivated

@typing.final
class ExtensionLspCompile(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    ADAPTER_TYPE_FIELD_NUMBER: builtins.int
    ADAPTER_UNIQUE_ID_FIELD_NUMBER: builtins.int
    DBT_VERSION_FIELD_NUMBER: builtins.int
    project_id: builtins.str
    """this is the hash of the project's name, used for anonymized telemetry"""
    adapter_type: builtins.str
    """the type of adapter used in the project (snowflake, bigquery, etc)"""
    adapter_unique_id: builtins.str
    """the unique id of the adapter used in the active profile eg. md5(hostname)"""
    dbt_version: builtins.str
    """the version of dbt used in the project"""
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
        project_id: builtins.str = ...,
        adapter_type: builtins.str = ...,
        adapter_unique_id: builtins.str = ...,
        dbt_version: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["adapter_type", b"adapter_type", "adapter_unique_id", b"adapter_unique_id", "dbt_version", b"dbt_version", "editor", b"editor", "enrichment", b"enrichment", "project_id", b"project_id", "user", b"user"]) -> None: ...

global___ExtensionLspCompile = ExtensionLspCompile
